import pointerExtend from './pointerExtend';
export declare function copyCoords(dest: any, src: any): void;
export declare function setCoordDeltas(targetObj: any, prev: any, cur: any): void;
export declare function setCoordVelocity(targetObj: any, delta: any): void;
export declare function setZeroCoords(targetObj: ReturnType<typeof newCoords>): void;
export declare function isNativePointer(pointer: any): boolean;
export declare function getXY(type: any, pointer: any, xy: any): any;
export declare function getPageXY(pointer: Interact.PointerType | Interact.InteractEvent, page?: Interact.Point): import("../types/types").Point;
export declare function getClientXY(pointer: any, client: any): any;
export declare function getPointerId(pointer: any): any;
export declare function setCoords(targetObj: any, pointers: any[], timeStamp: number): void;
export declare function getTouchPair(event: any): any[];
export declare function pointerAverage(pointers: PointerEvent[] | Event[]): {
    pageX: number;
    pageY: number;
    clientX: number;
    clientY: number;
    screenX: number;
    screenY: number;
};
export declare function touchBBox(event: Event | Array<(Interact.PointerType) | TouchEvent>): {
    x: number;
    y: number;
    left: number;
    top: number;
    right: number;
    bottom: number;
    width: number;
    height: number;
};
export declare function touchDistance(event: any, deltaSource: any): number;
export declare function touchAngle(event: any, deltaSource: any): number;
export declare function getPointerType(pointer: any): any;
export declare function getEventTargets(event: any): any[];
export declare function newCoords(): {
    page: {
        x: number;
        y: number;
    };
    client: {
        x: number;
        y: number;
    };
    timeStamp: number;
};
export declare function coordsToEvent(coords: MockCoords): ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & MouseEvent) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & MouseEvent & PointerEvent) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & MouseEvent & import("@interactjs/core/InteractEvent").InteractEvent<any, any>) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & MouseEvent & TouchEvent) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & Touch & MouseEvent) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & Touch & PointerEvent) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & Touch & import("@interactjs/core/InteractEvent").InteractEvent<any, any>) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & Touch & TouchEvent) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & PointerEvent & MouseEvent) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & PointerEvent) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & PointerEvent & import("@interactjs/core/InteractEvent").InteractEvent<any, any>) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & PointerEvent & TouchEvent) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & import("@interactjs/core/InteractEvent").InteractEvent<any, any> & MouseEvent) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & import("@interactjs/core/InteractEvent").InteractEvent<any, any> & PointerEvent) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & import("@interactjs/core/InteractEvent").InteractEvent<any, any>) | ({
    coords: MockCoords;
    readonly page: any;
    readonly client: any;
    readonly timeStamp: any;
    readonly pageX: any;
    readonly pageY: any;
    readonly clientX: any;
    readonly clientY: any;
    readonly pointerId: any;
    readonly target: any;
    readonly type: any;
    readonly pointerType: any;
    readonly buttons: any;
} & import("@interactjs/core/InteractEvent").InteractEvent<any, any> & TouchEvent);
export interface MockCoords {
    page: Interact.Point;
    client: Interact.Point;
    timeStamp?: number;
    pointerId?: any;
    target?: any;
    type?: string;
    pointerType?: string;
    buttons?: number;
}
export { pointerExtend };
